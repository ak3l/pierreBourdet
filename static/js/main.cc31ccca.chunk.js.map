{"version":3,"sources":["components/Header/logo.svg","translations/index.js","translations/en.js","translations/fr.js","components/Header/index.js","pages/App.js","serviceWorker.js","index.js"],"names":["module","exports","flattenMessages","nestedMessages","prefix","Object","keys","reduce","messages","key","value","prefixedKey","assign","translations","en","test","welcome","fr","Header","className","src","logo","alt","href","target","rel","App","React","useState","locale","changeLocale","Button","classes","size","variant","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,oNCGrCC,EAAkB,SAAlBA,EAAmBC,GAAD,IAAiBC,EAAjB,uDAA0B,GAA1B,OACpBC,OAAOC,KAAKH,GAAgBI,QAAO,SAACC,EAAUC,GAC1C,IAAMC,EAAQP,EAAeM,GACvBE,EAAcP,EAAM,UAAMA,EAAN,YAAgBK,GAAQA,EAQlD,MANqB,kBAAVC,EACPF,EAASG,GAAeD,EAExBL,OAAOO,OAAOJ,EAAUN,EAAgBQ,EAAOC,IAG5CH,IACR,KAOQK,EALM,CACjBC,GAAIZ,EClBO,CACXa,KAAM,CACFC,QAAS,aDiBbC,GAAIf,EEnBO,CACXa,KAAM,CACFC,QAAS,a,iBCmBFE,G,MAjBA,kBACX,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMF,UAAU,cAAcG,IAAI,SAC5C,mCACS,4CADT,wBAGA,uBACIH,UAAU,cACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,kBCcOC,G,MAjBH,WAAO,IAAD,EACiBC,IAAMC,SAAS,MADhC,mBACPC,EADO,KACCC,EADD,KAGd,OACI,kBAAC,IAAD,CAAcD,OAAQA,EAAQrB,SAAUK,EAAagB,IACjD,yBAAKV,UAAU,YACX,kBAACY,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,KAAK,QAAQC,QAAQ,YAAYC,QAAS,kBAAML,EAAa,QAA/F,MACA,kBAACC,EAAA,EAAD,CAAQE,KAAK,QAAQC,QAAQ,YAAYC,QAAS,kBAAML,EAAa,QAArE,OAEJ,kBAAC,IAAD,CAAkBM,GAAG,iBACrB,yBAAKjB,UAAU,OACX,kBAAC,EAAD,UCNIkB,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCRvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.cc31ccca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import en from './en';\nimport fr from './fr';\n\nconst flattenMessages = (nestedMessages, prefix = '') =>\n    Object.keys(nestedMessages).reduce((messages, key) => {\n        const value = nestedMessages[key];\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === 'string') {\n            messages[prefixedKey] = value;\n        } else {\n            Object.assign(messages, flattenMessages(value, prefixedKey));\n        }\n\n        return messages;\n    }, {});\n\nconst translations = {\n    en: flattenMessages(en),\n    fr: flattenMessages(fr),\n};\n\nexport default translations;\n","export default {\n    test: {\n        welcome: 'Welcome',\n    },\n};\n","export default {\n    test: {\n        welcome: 'Coucou',\n    },\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './index.scss';\n\nconst Header = () => (\n    <header className=\"Header\">\n        <img src={logo} className=\"Header-logo\" alt=\"logo\" />\n        <p>\n            Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n            className=\"Header-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            Learn React\n        </a>\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { IntlProvider, FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button'\nimport translations from '../translations';\nimport Header from '../components/Header';\nimport './App.scss';\n\nconst App = () => {\n    const [locale, changeLocale] = React.useState('fr');\n\n    return (\n        <IntlProvider locale={locale} messages={translations[locale]}>\n            <div className=\"mb-2 p-1\">\n                <Button classes=\"btn-success btn\" size=\"small\" variant=\"contained\" onClick={() => changeLocale('fr')}>FR</Button>\n                <Button size=\"small\" variant=\"contained\" onClick={() => changeLocale('en')}>EN</Button>\n            </div>\n            <FormattedMessage id=\"test.welcome\" />\n            <div className=\"App\">\n                <Header />\n            </div>\n        </IntlProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import './index.scss';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}